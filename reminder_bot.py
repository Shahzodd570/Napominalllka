import json
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
import logging

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
DATA_FILE = "reminders.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

# üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_reminders():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª
def save_reminders(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

reminders = load_reminders()

# üîî –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE, user_id, text):
    await context.bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    user_id_str = str(user_id)
    if user_id_str in reminders:
        reminders[user_id_str] = [r for r in reminders[user_id_str] if r["text"] != text]
        save_reminders(reminders)

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /set, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

# üìù –ö–æ–º–∞–Ω–¥–∞ /set YYYY-MM-DD HH:MM –¢–ï–ö–°–¢
async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_chat.id
        args = context.args

        if len(args) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

        date_str = args[0]
        time_str = args[1]
        text = ' '.join(args[2:])
        dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")

        if dt < datetime.now():
            await update.message.reply_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_id_str = str(user_id)
        reminders.setdefault(user_id_str, []).append({
            "datetime": dt.strftime("%Y-%m-%d %H:%M"),
            "text": text
        })
        save_reminders(reminders)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=dt,
            args=[context, user_id, text]
        )

        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {dt.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{text}¬ª")

    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /set 2025-06-23 14:30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ")

# üìã –ö–æ–º–∞–Ω–¥–∞ /list
async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_chat.id)
    if user_id not in reminders or len(reminders[user_id]) == 0:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    message = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for idx, r in enumerate(reminders[user_id], 1):
        message += f"{idx}) {r['datetime']} ‚Äî {r['text']}\n"

    await update.message.reply_text(message)

# ‚ùå –ö–æ–º–∞–Ω–¥–∞ /delete –ù–û–ú–ï–†
async def delete_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = str(update.effective_chat.id)
        if user_id not in reminders or len(reminders[user_id]) == 0:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return

        index = int(context.args[0]) - 1
        deleted = reminders[user_id].pop(index)
        save_reminders(reminders)

        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted['datetime']} ‚Äî {deleted['text']}")
    except:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /delete –ù–û–ú–ï–† (–Ω–∞–ø—Ä–∏–º–µ—Ä, /delete 1)")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    token = os.getenv("BOT_TOKEN")
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set", set_reminder))
    app.add_handler(CommandHandler("list", list_reminders))
    app.add_handler(CommandHandler("delete", delete_reminder))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
